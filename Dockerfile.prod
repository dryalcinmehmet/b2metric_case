###########
# BUILDER #
###########

# pull official base image
FROM python:3.8.16-slim as builder

# set work directory
WORKDIR /usr/src/app

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install psycopg2 dependencies
RUN apt-get update \
    && apt-get install -y  \
        python3 python3-pip \
        software-properties-common postgresql  \
        postgresql-client postgresql-contrib gcc \
        python3-dev musl-dev libssl-dev openssl wget 

# lint
RUN pip install --upgrade pip
RUN pip install black isort
COPY . .
RUN black .
RUN isort .

# install dependencies
COPY ./requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt --use-deprecated=legacy-resolver


#########
# FINAL #
#########

# pull official base image
FROM python:3.8.16-slim

# create directory for the app user
RUN mkdir -p /home/app

# create the app user
RUN adduser --system --group --no-create-home app
RUN addgroup app app 

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/staticfiles
RUN mkdir $APP_HOME/mediafiles
WORKDIR $APP_HOME

# install dependencies
RUN apt-get update && apt-get install -y python3 python3-pip libpq-dev dos2unix
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements.txt .
RUN pip install --no-cache /wheels/* --use-deprecated=legacy-resolver
RUN pip install psycopg2-binary

# copy entrypoint.prod.sh
COPY ./entrypoint.prod.sh .
RUN sed -i 's/\r$//g'  $APP_HOME/entrypoint.prod.sh
RUN chmod u+x   $APP_HOME/entrypoint.prod.sh

# copy project
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app

# run entrypoint.prod.sh
ENTRYPOINT ["/home/app/web/entrypoint.prod.sh"]